Step 1: Sign into GitHub
Sign into your GitHub account, or create a free GitHub account if you don't have one.

Step 2: Fork the project repository
Find the project's repository on GitHub, and then "fork" it by clicking the Fork button in the upper right corner.
This creates a copy of the project repository in your GitHub account. In the upper left corner, you will see that you are now looking at a repository in your account.

Step 3: Clone your fork
While still in your repository, click the green Clone or download button and then copy the HTTPS URL.
Using Git on your local machine, clone your fork using the URL you just copied: git clone <URL_OF_FORK>.
Cloning copies the repository files (and commit history) from GitHub to your local machine. The repository will be downloaded into a subdirectory of your working directory, and the subdirectory will have the same name as the repository.

Step 4: Navigate to your local repository
Since the clone was downloaded into a subdirectory of your working directory, you can navigate to it using: cd NAME_OF_REPOSITORY.

Step 5: Create a new branch
Rather than making changes to the project's "master" branch, it's a good practice to instead create your own branch. This creates an environment for your work that is isolated from the master branch.
Use "git checkout -b BRANCH_NAME" to create a new branch and then immediately switch to it. The name of the branch should briefly describe what you are working on, and should not contain any spaces.
Use "git branch" to show your local branches. You should see your new branch as well as "master", and your new branch should have an asterisk next to it to indicate that it's "checked out" (meaning that you're working in it).

Step 6: Make changes in your local repository
Use a text editor or IDE to make the changes you planned to the files in your local repository. Because you checked out a branch in the previous step, any edits you make will only affect that branch.

Step 7: Commit your changes
After you make a set of changes, use "git add -A" to stage your changes and "git commit -m "DESCRIPTION OF CHANGES"" to commit them.
If you are making multiple sets of changes, it's a good practice to make a commit after each set.

Step 8: Push your changes to your fork
When you are done making all of your changes, upload these changes to your fork using "git push origin <BRANCH_NAME>". This "pushes" your changes to the "BRANCH_NAME" branch of the "origin" (which is your fork on GitHub).

Step 9: Synchronize with remote repositories
You are going to be synchronizing your local repository with both the project repository (on GitHub) and your fork (also on GitHub). The URLs that point to these repositories are called "remotes". More specifically, the project repository is called the "upstream" remote, and your fork is called the "origin" remote.
Use "git fetch upstream" to synchronize.

Step 10: Begin the pull request
Return to your fork on GitHub, and refresh the page. You may see a highlighted area that displays your recently pushed branch.
Click the green Compare & pull request button to begin the pull request.

Step 11: Create the pull request
When opening a "pull request", you are making a "request" that the project repository "pull" changes from your fork. You will see that the project repository is listed as the "base repository", and your fork is listed as the "head repository".

Congratulations!
Congratulations on making your first open source contribution! 
